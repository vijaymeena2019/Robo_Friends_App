{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","robot","index","components_Card","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_containers_App"],"mappings":"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","file":"static/js/main.3cd9584b.chunk.js","sourcesContent":["import React from 'react';\r\n// import 'tachyons';  \r\n\r\n\r\n\r\nconst Card = ({ id, name, email }) => {   // destructure\r\n    // const { id, name, email } = props;\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\nimport React from 'react';\r\n// import { robots } from './robots'\r\n//const cardArray = robots.map((robot, index) => < Card id={robot.id} key={index} name={robot.name} email={robot.email} username={robot.username} />)  // each child should have a unique key\r\nconst CardList = ({ robots }) => {   // props.robots   destructure\r\n    // if (true) {  // to check for ErrorBoundry Component\r\n    //     throw new Error('Nooooo!');\r\n    // }\r\n    return (\r\n        <div>\r\n            {/* {cardArray} */}\r\n\r\n            {                                       // it works because we can use js in curly brackets\r\n                robots.map((robot, index) => < Card\r\n                    id={robot.id}\r\n                    key={index}\r\n                    name={robot.name}\r\n                    email={robot.email}\r\n                    username={robot.username}\r\n                />)\r\n            }\r\n            {/* curly bracket because it is script code and need to  be evaluate */}\r\n            {/* < Card id={robots[0].id} name={robots[0].name} email={robots[0].email} username={robots[0].username} />\r\n            < Card id={robots[1].id} name={robots[1].name} email={robots[1].email} username={robots[1].username} />\r\n            < Card id={robots[2].id} name={robots[2].name} email={robots[2].email} username={robots[2].username} /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='serch'\r\n                placeholder='Search Robots'\r\n                onChange={searchChange}  // onchange in html, it is a event , we are just listening to \"any time the input changes\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n\r\n// // just trying to make search function in vanila js\r\n// let input = document.querySelector('input');\r\n// let text = input.textContent;\r\n// input.addEventListener('keydown', function (event, { robots }) {\r\n//     text = input.textContent;\r\n//     let txlen = text.length - 1;\r\n//     let newArray = robots.filter((robot) => {\r\n//         return text === robot.name.slice(0, txlen);\r\n//     })\r\n\r\n\r\n// })\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n// all for react 16 and above\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {  // like try catch block in js, any error out  it will run this lifecyle hook\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops...Something Wrong Here!</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n// import { robots } from './robots';    // for rest Api\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n// const state = {\n//   robots: robots,\n//   searchfeild: ''\n// }\nclass App extends Component {\n  // const App = () => {\n  constructor() {\n    super()   // otherwise get error: 'this' is  not allowed before super()\n    this.state = {   // state which discribe our app, these are the thing which can change and usually lives in parent component, parent that passed the state to different component ,but props never change\n      robots: [],      // now App owns state that  now owns rebots , it allow us to change it.\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {     // rest Api learn latar\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        return response.json();\n      })\n      .then(users => {\n        this.setState({ robots: users })\n      });\n  }\n\n  onSearchChange = (event) => {  // always arrow fn and it is thumb rule in react\n    this.setState({ searchfield: event.target.value })  // predefine fn  in react and thumb rule to use like that\n    console.log(event.target.value);\n    // const filteredRobots = this.state.robots.filter(robot => {\n    //   return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    // let txlen = event.target.value.length;\n    // return event.target.value === robot.name.slice(0,txlen)\n  }\n\n  render() {\n    // const { robots, searchField } = this.state    // we can use this destructuring for this.state, we need to change all this.state to variables after this\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    if (this.state.robots.length === 0) {\n      return <h1>Loading</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>Robo Friends</h1>\n          < SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              < CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n\n\n\n\n\n// import React, { Component } from 'react';\n\n// class App extends React.Component {//function App() {  // convert it into class component from a functional component\n//   render() {   // added    // this React.Component automatically detects this render method.\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './containers/App';\nimport './index.css';\n// import './index.css';\n// import { robots } from './robots';\n// import Hello from './Hello';\n// import Card from './Card';\n// import CardList from './CardList';\nimport 'tachyons';  // we may import 'tachyons' here or any clild component all works fine\n\n// import reportWebVitals from './reportWebVitals';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    < App />\n    {/* <div>\n      <h1>Robo Friends</h1>\n      < CardList robots={robots} />\n  </div> */}\n    {/* < Hello greetings={'Hello' + \" Ninja\"} /> */}\n  </React.StrictMode >\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}